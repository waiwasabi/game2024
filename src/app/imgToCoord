import React, { useState, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Upload } from 'lucide-react';

const PixelArtAnalyzer = () => {
  const [results, setResults] = useState([]);
  const [imageLoaded, setImageLoaded] = useState(false);
  const canvasRef = useRef(null);

  const analyzeImage = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      const img = new Image();
      img.onload = () => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        
        // Set canvas size to match image
        canvas.width = img.width;
        canvas.height = img.height;
        
        // Draw image to canvas
        ctx.drawImage(img, 0, 0);
        
        // Get image data
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const pixels = imageData.data;
        
        const foundElements = [];
        
        // Analyze each pixel
        for (let y = 0; y < canvas.height; y++) {
          for (let x = 0; x < canvas.width; x++) {
            const index = (y * canvas.width + x) * 4;
            const r = pixels[index];
            const g = pixels[index + 1];
            const b = pixels[index + 2];
            
            // Check for red pixels (player)
            if (r > 200 && g < 50 && b < 50) {
              foundElements.push({ x, y, type: 'player', color: 'red' });
            }
            // Check for yellow pixels (portal)
            else if (r > 200 && g > 200 && b < 50) {
              foundElements.push({ x, y, type: 'portal', color: 'yellow' });
            }
            // Check for blue pixels (platform)
            else if (r < 50 && g < 50 && b > 200) {
              foundElements.push({ x, y, type: 'platform', color: 'blue' });
            }
          }
        }
        
        setResults(foundElements);
        setImageLoaded(true);
      };
      img.src = event.target.result;
    };
    reader.readAsDataURL(file);
  };

  return (
    <Card className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle>Pixel Art Game Level Analyzer</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* File Upload */}
          <div className="flex items-center justify-center w-full">
            <label className="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
              <div className="flex flex-col items-center justify-center pt-5 pb-6">
                <Upload className="w-10 h-10 mb-3 text-gray-400" />
                <p className="mb-2 text-sm text-gray-500">
                  <span className="font-semibold">Click to upload</span> or drag and drop
                </p>
                <p className="text-xs text-gray-500">PNG or JPG</p>
              </div>
              <input type="file" className="hidden" onChange={analyzeImage} accept="image/*" />
            </label>
          </div>

          {/* Hidden Canvas */}
          <canvas ref={canvasRef} className="hidden" />

          {/* Results */}
          {imageLoaded && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Detected Elements:</h3>
              <div className="grid grid-cols-3 gap-4">
                {['player', 'portal', 'platform'].map(type => (
                  <div key={type} className="space-y-2">
                    <h4 className="font-medium capitalize">{type}</h4>
                    <div className="max-h-48 overflow-y-auto">
                      {results
                        .filter(elem => elem.type === type)
                        .map((elem, i) => (
                          <div key={i} className="text-sm">
                            ({elem.x}, {elem.y})
                          </div>
                        ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default PixelArtAnalyzer;